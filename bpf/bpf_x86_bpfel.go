// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type BpfExecEventT struct {
	Pid       uint32
	Truncated uint8
	_         [3]byte
	ArgsSize  uint32
	Args      [4096]int8
}

type BpfFlowPidKeyT struct {
	Saddr [4]uint32
	Sport uint16
	_     [2]byte
}

type BpfFlowPidValueT struct {
	Pid     uint32
	Comm    [16]int8
	TtyName [64]int8
}

type BpfPacketEventT struct {
	Meta struct {
		PacketType uint8
		_          [3]byte
		Pid        uint32
		PayloadLen uint64
		Comm       [16]int8
	}
	Payload [1500]uint8
	_       [4]byte
}

// LoadBpf returns the embedded CollectionSpec for Bpf.
func LoadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Bpf: %w", err)
	}

	return spec, err
}

// LoadBpfObjects loads Bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfObjects
//	*BpfPrograms
//	*BpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSpecs struct {
	BpfProgramSpecs
	BpfMapSpecs
}

// BpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgramSpecs struct {
	KprobeSecuritySkClassifyFlow    *ebpf.ProgramSpec `ebpf:"kprobe__security_sk_classify_flow"`
	TcEgress                        *ebpf.ProgramSpec `ebpf:"tc_egress"`
	TcIngress                       *ebpf.ProgramSpec `ebpf:"tc_ingress"`
	TracepointSchedSchedProcessExec *ebpf.ProgramSpec `ebpf:"tracepoint__sched__sched_process_exec"`
}

// BpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfMapSpecs struct {
	BpfStack     *ebpf.MapSpec `ebpf:"bpf_stack"`
	ExecEvents   *ebpf.MapSpec `ebpf:"exec_events"`
	FlowPidMap   *ebpf.MapSpec `ebpf:"flow_pid_map"`
	PacketEvents *ebpf.MapSpec `ebpf:"packet_events"`
}

// BpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfObjects struct {
	BpfPrograms
	BpfMaps
}

func (o *BpfObjects) Close() error {
	return _BpfClose(
		&o.BpfPrograms,
		&o.BpfMaps,
	)
}

// BpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfMaps struct {
	BpfStack     *ebpf.Map `ebpf:"bpf_stack"`
	ExecEvents   *ebpf.Map `ebpf:"exec_events"`
	FlowPidMap   *ebpf.Map `ebpf:"flow_pid_map"`
	PacketEvents *ebpf.Map `ebpf:"packet_events"`
}

func (m *BpfMaps) Close() error {
	return _BpfClose(
		m.BpfStack,
		m.ExecEvents,
		m.FlowPidMap,
		m.PacketEvents,
	)
}

// BpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPrograms struct {
	KprobeSecuritySkClassifyFlow    *ebpf.Program `ebpf:"kprobe__security_sk_classify_flow"`
	TcEgress                        *ebpf.Program `ebpf:"tc_egress"`
	TcIngress                       *ebpf.Program `ebpf:"tc_ingress"`
	TracepointSchedSchedProcessExec *ebpf.Program `ebpf:"tracepoint__sched__sched_process_exec"`
}

func (p *BpfPrograms) Close() error {
	return _BpfClose(
		p.KprobeSecuritySkClassifyFlow,
		p.TcEgress,
		p.TcIngress,
		p.TracepointSchedSchedProcessExec,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_x86_bpfel.o
var _BpfBytes []byte
